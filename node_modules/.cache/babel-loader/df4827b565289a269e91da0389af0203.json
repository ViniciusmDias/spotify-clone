{"ast":null,"code":"var _jsxFileName = \"/home/vinicius/projects/react-17/src/routes/PlaylistsRoute.jsx\";\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCategoryPlaylistFailed, getCategoryPlaylistRequest, getCategoryPlaylistSuccess, logout } from '../actions';\nimport { Playlists } from '../containers';\nimport { endpoints } from '../modules/endpoints';\nimport { getContentNameById } from '../modules/helpers';\nimport { request, sanitizeUrl } from '../modules/request';\nconst {\n  getCategoryPlaylists\n} = endpoints;\n\nconst PlaylistsRoute = ({\n  path\n}) => {\n  const {\n    auth,\n    content\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const {\n    categoryId\n  } = useParams();\n  useEffect(() => {\n    const requestOptions = { ...getCategoryPlaylists.options,\n      headers: {\n        'Authorization': `Bearer ${auth.accessToken}`\n      }\n    };\n    dispatch(getCategoryPlaylistRequest());\n    request(sanitizeUrl(getCategoryPlaylists.url, {\n      categoryId\n    }), requestOptions).then(data => dispatch(getCategoryPlaylistSuccess(data))).catch(error => {\n      if (error === 401) {\n        dispatch(logout());\n        return;\n      }\n\n      dispatch(getCategoryPlaylistFailed(error));\n    });\n  }, [auth, categoryId, dispatch]);\n  return /*#__PURE__*/React.createElement(Playlists, {\n    categoryId: categoryId,\n    categoryName: getContentNameById(categoryId, content.categories),\n    data: content.playlists,\n    isLoading: content.status === 'running' && content.playlists.length === 0,\n    path: path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default PlaylistsRoute;","map":{"version":3,"sources":["/home/vinicius/projects/react-17/src/routes/PlaylistsRoute.jsx"],"names":["React","useEffect","useParams","useDispatch","useSelector","getCategoryPlaylistFailed","getCategoryPlaylistRequest","getCategoryPlaylistSuccess","logout","Playlists","endpoints","getContentNameById","request","sanitizeUrl","getCategoryPlaylists","PlaylistsRoute","path","auth","content","state","dispatch","categoryId","requestOptions","options","headers","accessToken","url","then","data","catch","error","categories","playlists","status","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SACEC,yBADF,EAEEC,0BAFF,EAGEC,0BAHF,EAIEC,MAJF,QAKO,YALP;AAOA,SAASC,SAAT,QAA0B,eAA1B;AAEA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,oBAArC;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAA2BJ,SAAjC;;AAEA,MAAMK,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACnC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBd,WAAW,CAACe,KAAK,IAAIA,KAAV,CAArC;AACA,QAAMC,QAAQ,GAAGjB,WAAW,EAA5B;AACA,QAAM;AAAEkB,IAAAA;AAAF,MAAiBnB,SAAS,EAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,cAAc,GAAG,EACrB,GAAGR,oBAAoB,CAACS,OADH;AAErBC,MAAAA,OAAO,EAAE;AAAE,yBAAkB,UAASP,IAAI,CAACQ,WAAY;AAA9C;AAFY,KAAvB;AAKAL,IAAAA,QAAQ,CAACd,0BAA0B,EAA3B,CAAR;AAEAM,IAAAA,OAAO,CAACC,WAAW,CAACC,oBAAoB,CAACY,GAAtB,EAA0B;AAAEL,MAAAA;AAAF,KAA1B,CAAZ,EAAuDC,cAAvD,CAAP,CACGK,IADH,CACQC,IAAI,IAAIR,QAAQ,CAACb,0BAA0B,CAACqB,IAAD,CAA3B,CADxB,EAEGC,KAFH,CAESC,KAAK,IAAI;AACd,UAAIA,KAAK,KAAK,GAAd,EAAmB;AACjBV,QAAAA,QAAQ,CAACZ,MAAM,EAAP,CAAR;AAEA;AACD;;AAEDY,MAAAA,QAAQ,CAACf,yBAAyB,CAACyB,KAAD,CAA1B,CAAR;AACD,KAVH;AAWD,GAnBQ,EAmBN,CAACb,IAAD,EAAOI,UAAP,EAAmBD,QAAnB,CAnBM,CAAT;AAqBA,sBACE,oBAAC,SAAD;AACE,IAAA,UAAU,EAAEC,UADd;AAEE,IAAA,YAAY,EAAEV,kBAAkB,CAACU,UAAD,EAAaH,OAAO,CAACa,UAArB,CAFlC;AAGE,IAAA,IAAI,EAAEb,OAAO,CAACc,SAHhB;AAIE,IAAA,SAAS,EAAEd,OAAO,CAACe,MAAR,KAAmB,SAAnB,IAAgCf,OAAO,CAACc,SAAR,CAAkBE,MAAlB,KAA6B,CAJ1E;AAKE,IAAA,IAAI,EAAElB,IALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CAnCD;;AAqCA,eAAeD,cAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  getCategoryPlaylistFailed,\n  getCategoryPlaylistRequest,\n  getCategoryPlaylistSuccess,\n  logout,\n} from '../actions';\n\nimport { Playlists } from '../containers';\n\nimport { endpoints } from '../modules/endpoints';\nimport { getContentNameById } from '../modules/helpers';\nimport { request, sanitizeUrl } from '../modules/request';\n\nconst { getCategoryPlaylists } = endpoints;\n\nconst PlaylistsRoute = ({ path }) => {\n  const { auth, content } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const { categoryId } = useParams();\n\n  useEffect(() => {\n    const requestOptions = {\n      ...getCategoryPlaylists.options,\n      headers: { 'Authorization': `Bearer ${auth.accessToken}` }\n    }\n\n    dispatch(getCategoryPlaylistRequest());\n\n    request(sanitizeUrl(getCategoryPlaylists.url,{ categoryId }), requestOptions)\n      .then(data => dispatch(getCategoryPlaylistSuccess(data)))\n      .catch(error => {\n        if (error === 401) {\n          dispatch(logout());\n\n          return;\n        }\n\n        dispatch(getCategoryPlaylistFailed(error));\n      });\n  }, [auth, categoryId, dispatch]);\n\n  return (\n    <Playlists\n      categoryId={categoryId}\n      categoryName={getContentNameById(categoryId, content.categories)}\n      data={content.playlists}\n      isLoading={content.status === 'running' && content.playlists.length === 0}\n      path={path}\n    />\n  );\n}\n\nexport default PlaylistsRoute;"]},"metadata":{},"sourceType":"module"}