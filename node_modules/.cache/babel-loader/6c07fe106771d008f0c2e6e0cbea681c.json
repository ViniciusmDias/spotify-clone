{"ast":null,"code":"var _jsxFileName = \"/home/vinicius/projects/react-17/src/routes/TracksRoute.jsx\";\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPlaylistTracksRequest, getPlaylistTracksSuccess, getPlaylistTracksFailed, logout } from '../actions';\nimport { endpoints } from '../modules/endpoints';\nimport { getContentNameById } from '../modules/helpers';\nimport { request, sanitizeUrl } from '../modules/request';\nimport { Tracks } from '../containers';\nconst {\n  getPlaylistTracks\n} = endpoints;\n\nconst TracksRoute = ({\n  path\n}) => {\n  const {\n    auth,\n    content\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const {\n    playlistId\n  } = useParams();\n  useEffect(() => {\n    const requestOptions = { ...getPlaylistTracks.options,\n      headers: {\n        'Authorization': `Bearer ${auth.accessToken}`\n      }\n    };\n    dispatch(getPlaylistTracksRequest());\n    request(sanitizeUrl(getPlaylistTracks.url, {\n      playlistId\n    }), requestOptions).then(data => dispatch(getPlaylistTracksSuccess(data))).catch(error => {\n      if (error === 401) {\n        dispatch(logout());\n        return;\n      }\n\n      dispatch(getPlaylistTracksFailed(error));\n    });\n  }, [auth, playlistId, dispatch]);\n  return /*#__PURE__*/React.createElement(Tracks, {\n    categoryName: getContentNameById(playlistId, content.playlists),\n    data: content.tracks,\n    isLoading: content.status === 'running',\n    path: path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default TracksRoute;","map":{"version":3,"sources":["/home/vinicius/projects/react-17/src/routes/TracksRoute.jsx"],"names":["React","useEffect","useParams","useDispatch","useSelector","getPlaylistTracksRequest","getPlaylistTracksSuccess","getPlaylistTracksFailed","logout","endpoints","getContentNameById","request","sanitizeUrl","Tracks","getPlaylistTracks","TracksRoute","path","auth","content","state","dispatch","playlistId","requestOptions","options","headers","accessToken","url","then","data","catch","error","playlists","tracks","status"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SACEC,wBADF,EAEEC,wBAFF,EAGEC,uBAHF,EAIEC,MAJF,QAKO,YALP;AAOA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,oBAArC;AAEA,SAASC,MAAT,QAAuB,eAAvB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAwBL,SAA9B;;AAEA,MAAMM,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAChC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBd,WAAW,CAACe,KAAK,IAAIA,KAAV,CAArC;AACA,QAAMC,QAAQ,GAAGjB,WAAW,EAA5B;AACA,QAAM;AAAEkB,IAAAA;AAAF,MAAiBnB,SAAS,EAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,cAAc,GAAG,EACrB,GAAGR,iBAAiB,CAACS,OADA;AAErBC,MAAAA,OAAO,EAAE;AAAE,yBAAkB,UAASP,IAAI,CAACQ,WAAY;AAA9C;AAFY,KAAvB;AAKAL,IAAAA,QAAQ,CAACf,wBAAwB,EAAzB,CAAR;AAEAM,IAAAA,OAAO,CAACC,WAAW,CAACE,iBAAiB,CAACY,GAAnB,EAAuB;AAAEL,MAAAA;AAAF,KAAvB,CAAZ,EAAoDC,cAApD,CAAP,CACGK,IADH,CACQC,IAAI,IAAIR,QAAQ,CAACd,wBAAwB,CAACsB,IAAD,CAAzB,CADxB,EAEGC,KAFH,CAESC,KAAK,IAAI;AACd,UAAIA,KAAK,KAAK,GAAd,EAAmB;AACjBV,QAAAA,QAAQ,CAACZ,MAAM,EAAP,CAAR;AAEA;AACD;;AAEDY,MAAAA,QAAQ,CAACb,uBAAuB,CAACuB,KAAD,CAAxB,CAAR;AACD,KAVH;AAYD,GApBQ,EAoBN,CAACb,IAAD,EAAOI,UAAP,EAAmBD,QAAnB,CApBM,CAAT;AAsBA,sBACE,oBAAC,MAAD;AACE,IAAA,YAAY,EAAEV,kBAAkB,CAACW,UAAD,EAAaH,OAAO,CAACa,SAArB,CADlC;AAEE,IAAA,IAAI,EAAEb,OAAO,CAACc,MAFhB;AAGE,IAAA,SAAS,EAAEd,OAAO,CAACe,MAAR,KAAmB,SAHhC;AAIE,IAAA,IAAI,EAAEjB,IAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CAnCD;;AAqCA,eAAeD,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  getPlaylistTracksRequest,\n  getPlaylistTracksSuccess,\n  getPlaylistTracksFailed,\n  logout,\n} from '../actions';\n\nimport { endpoints } from '../modules/endpoints';\nimport { getContentNameById } from '../modules/helpers';\nimport { request, sanitizeUrl } from '../modules/request';\n\nimport { Tracks } from '../containers';\n\nconst { getPlaylistTracks } = endpoints;\n\nconst TracksRoute = ({ path }) => {\n  const { auth, content } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const { playlistId } = useParams();\n\n  useEffect(() => {\n    const requestOptions = {\n      ...getPlaylistTracks.options,\n      headers: { 'Authorization': `Bearer ${auth.accessToken}` }\n    }\n\n    dispatch(getPlaylistTracksRequest());\n\n    request(sanitizeUrl(getPlaylistTracks.url,{ playlistId }), requestOptions)\n      .then(data => dispatch(getPlaylistTracksSuccess(data)))\n      .catch(error => {\n        if (error === 401) {\n          dispatch(logout());\n\n          return;\n        }\n\n        dispatch(getPlaylistTracksFailed(error));\n      });\n\n  }, [auth, playlistId, dispatch]);\n\n  return (\n    <Tracks\n      categoryName={getContentNameById(playlistId, content.playlists)}\n      data={content.tracks}\n      isLoading={content.status === 'running'}\n      path={path}\n    />\n  );\n}\n\nexport default TracksRoute;"]},"metadata":{},"sourceType":"module"}